start = trim @(statement, newlines, 0, 0) final_trim

none = /&*/
ws = /\s+/
trim = /\s*/
final_trim = /\s*$/
newlines = /(\s*\n)+\s*/
comma_or_newline = /\s*((\s*\n)+|,)\s*/
dot = "."

id = /[a-zA-Z0-9_]+/

path = @(id, dot, 2, 0)

path_or_id = @(id, dot, 1, 0)

reference = path_or_id @(method, none, 0, 0)

method = "|" id

statement =
    create_symbol
  | node_scope
  | trellis_scope
  | create_constraint
	| create_node

create_symbol = "let" ws id trim "=" trim expression

create_constraint = path trim "=" trim expression

expression =
    @(expression_part, operation_separator, 1, 0)

operation_separator = trim operator trim

expression_part =
    value
  | create_node
  | reference
	| set_property_block

string = ('"' /[^"]*/ '"') | ("'" /[^']*/ "'")
bool = "true" | "false"
int = /-?[0-9]+/
float = /-?([0-9]*\.)?[0-9]+f?/
operator = '+' | '-' | '/' | '*' | '%'
constraint_operator = '=' | '<' | '>' | '<=' | '>='

value = string | bool | int | float

dummy = "@&^%"

create_node = "new" ws path_or_id trim @(set_property_block, dummy, 0, 1)

set_property_block = "{" trim @(set_property, comma_or_newline, 0, 0) trim "}"

set_property = path_or_id trim ":" trim @(operator, dummy, 0, 1) trim expression

node_scope = path_or_id trim set_property_block

trellis_scope = path_or_id trim constraint_block

constraint_block = "(" trim @(constraint, comma_or_newline, 1, 0) trim ")"

constraint = path_or_id trim constraint_operator trim expression